---
title: "R for Data Science [3- Visualization]"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(ggplot2)
```

## 3.2 First steps

We will use our first graph to answer a question: Do cars with big engines use more fuel than cars with small engines?

```{r}
View(mpg)
colnames(mpg)

```

### 3.2.2 Making a ggplot

To plot mpg, run this code to put displ on the x-axis and hwy on the y-axis

```{r}
ggplot(data= mpg)+
  geom_point(mapping = aes(x = displ, y = hwy))
```

### 3.2.3 A graphing template

```{r}
ggplot(data = <DATA>)+
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

```{r}
str(mpg)
#there are 234 rows and 11 columns in mpg 
```

```{r}
#What does the drv variable describe? it describes the type of drive train, where f = front wheel drive, r = rear wheel drive, and 4 =4wd
```

```{r}
#make a scatter plot of hwy vs cyl
ggplot(data = mpg, aes(x = hwy, y = cyl))+
  geom_point()
```

```{r}
#what happens if you make a scatterplot of class vs drv
ggplot(data = mpg, aes(x = class, y = drv))+
  geom_point()
#data isn't too useful because it doesn't show a quantitative correlation between the way a car drives and the type it is, each class of car can have different type of drive train. 
```

You can convey information about your data by mapping the aesthetics in your plot to the variables in your dataset. You can map the colors of your points to the class variable to reveal the class of each car.

```{r}
ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
#mapping an aesthetic to a variable, associate the name of the aesthetic to the name of the variable inside aes(); ggplot will automatically assign a unique level of the aesthetic to each unique value of the variable [scaling]

```

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ , y = hwy, size = class))
```

```{r}
# if you map class to the alpha aesthetic, it controls the transparency of the points, or to the shape aesthetic, which controls the shape of the points

#left
ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))

ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

To set an aesthetic manually, set the aesthetic by name as an argument of your geom function, it goes outside of aes()

```{r}
ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y =hwy, color = "blue"))
```

### 3.5 Facets

A way to add additional variables is with aesthetics. A particularly useful way for categorical variables is to split your plot into facets, subplots that each display one subset of the data. The variable that you pass to facet_wrap() should be discrete.

```{r}
ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y = hwy))+
  facet_wrap(~ class, nrow = 4, ncol = 2)
```

### 3.5.1 Exercises

1.  What happens if you facet on a continuous variable?

```{r}
ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y = hwy))+
  facet_wrap(~ cty, nrow =2)
```

```{r}
#what do the empty cells in plot with facet_grid(drv~cyl) mean? How do they relate to this plot?
ggplot(data = mpg)+
  geom_point(mapping = aes(x = drv, y = cyl ))
```

To display multiple geoms in the same plot, add multiple geom functions to ggplot()

```{r}
ggplot(data = mpg)+
  geom_point(mapping = aes(x= displ, y = hwy))+
  geom_smooth(mapping = aes(x = displ, y = hwy))

#OR
ggplot(data = mpg , mapping = aes(x = displ, y= hwy))+
  geom_point() +
  geom_smooth()
```

```{r}
#if you place mappings in a geom function, ggplot will treat them as local mappings for the layer. it will use these mappings to extend or overwrite the global mappings for that layer only, making it possible to display different aesthetics in different layers

ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
  geom_point(mapping = aes(color = class))+
  geom_smooth()
```

#### 3.6.1

1.  What geom would you use to draw a line chart, a boxplot, a histogram, an area chart?

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
  geom_area()
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv))+
  geom_point()+
  geom_smooth(se = FALSE)
#se is shaded confidence interval 
```

Recreating code to generate graphs

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
  geom_point()+
  geom_smooth(se = FALSE)
  
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv))+
  geom_point()+
  geom_smooth(se = FALSE)
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv, color = drv))+
  geom_point()+
  geom_smooth(se = FALSE)
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv, color = drv, linetype = drv))+
  geom_point()+
  geom_smooth(se = FALSE)
  
```

### 3.7 Statistical transformations

```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = aes(x = cut))
```

### 3.8 Position arguments

There's one more piece of magic associated with bar charts. You can color a bar chart using wither color using wither the color aesthetic or more usefully fill:

```{r}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut, color = cut ))

ggplot(data = diamonds)+
  geom_bar(mapping = aes(x = cut, fill = cut))
```

```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = aes(x = cut, fill = clarity))
```
